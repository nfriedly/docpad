// Generated by CoffeeScript 1.6.3
(function() {
  var DocPad, balUtil, baseUrl, cliPath, docpad, docpadConfig, docpadPath, expect, expectPath, joe, outPath, pathUtil, port, rootPath, safefs, srcPath, superAgent, testWait, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  superAgent = require('superagent');

  balUtil = require('bal-util');

  safefs = require('safefs');

  DocPad = require('../lib/docpad');

  expect = require('chai').expect;

  joe = require('joe');

  _ = require('lodash');

  pathUtil = require('path');

  docpadPath = pathUtil.join(__dirname, '..', '..');

  rootPath = pathUtil.join(docpadPath, 'test');

  srcPath = pathUtil.join(rootPath, 'src');

  outPath = pathUtil.join(rootPath, 'out');

  expectPath = pathUtil.join(rootPath, 'out-expected');

  cliPath = pathUtil.join(docpadPath, 'bin', 'docpad');

  port = 9779;

  baseUrl = "http://localhost:" + port;

  testWait = 1000 * 60 * 5;

  docpadConfig = {
    port: port,
    rootPath: rootPath,
    logLevel: (process.env.TRAVIS_NODE_VERSION != null) || __indexOf.call(process.argv, '-d') >= 0 ? 7 : 5,
    skipUnsupportedPlugins: false,
    catchExceptions: false,
    environments: {
      development: {
        a: 'instanceConfig',
        b: 'instanceConfig',
        templateData: {
          a: 'instanceConfig',
          b: 'instanceConfig'
        }
      }
    }
  };

  process.on('uncaughtException', function(err) {
    throw err;
  });

  docpad = null;

  joe.suite('docpad-actions', function(suite, test) {
    test('create', function(done) {
      return docpad = DocPad.createInstance(docpadConfig, function(err) {
        return done(err);
      });
    });
    test('config', function(done) {
      var a, b, c, config, expected, templateData;
      expected = {
        a: 'instanceConfig',
        b: 'instanceConfig',
        c: 'websiteConfig'
      };
      config = docpad.getConfig();
      a = config.a, b = config.b, c = config.c;
      expect({
        a: a,
        b: b,
        c: c
      }).to.deep.equal(expected);
      templateData = docpad.getTemplateData();
      a = templateData.a, b = templateData.b, c = templateData.c;
      expect({
        a: a,
        b: b,
        c: c
      }).to.deep.equal(expected);
      return done();
    });
    test('clean', function(done) {
      return docpad.action('clean', function(err) {
        return done(err);
      });
    });
    test('install', function(done) {
      return docpad.action('install', function(err) {
        return done(err);
      });
    });
    suite('generate', function(suite, test) {
      test('action', function(done) {
        return docpad.action('generate', function(err) {
          return done(err);
        });
      });
      suite('results', function(suite, test) {
        var testMarkup;
        testMarkup = function(key, actual, expected) {
          return test(key, function() {
            var actualString, expectedString;
            actualString = actual.trim().replace(/\s+/g, '').replace(/([abc])[\\]+/g, '$1/');
            expectedString = expected.trim().replace(/\s+/g, '').replace(/([abc])[\\]+/g, '$1/');
            return expect(actualString).to.be.equal(expectedString);
          });
        };
        return test('same files', function(done) {
          return balUtil.scandir({
            path: outPath,
            readFiles: true,
            ignoreHiddenFiles: false,
            next: function(err, outList) {
              return balUtil.scandir({
                path: expectPath,
                readFiles: true,
                ignoreHiddenFiles: false,
                next: function(err, expectList) {
                  var actual, expected, key;
                  expect(_.difference(Object.keys(outList), Object.keys(expectList))).to.be.empty;
                  for (key in outList) {
                    if (!__hasProp.call(outList, key)) continue;
                    actual = outList[key];
                    expected = expectList[key];
                    testMarkup(key, actual, expected);
                  }
                  return done();
                }
              });
            }
          });
        });
      });
      test('ignored "ignored" documents"', function(done) {
        return safefs.exists("" + outPath + "/ignored.html", function(exists) {
          expect(exists).to.be["false"];
          return done();
        });
      });
      return test('ignored common patterns documents"', function(done) {
        return safefs.exists("" + outPath + "/.svn", function(exists) {
          expect(exists).to.be["false"];
          return done();
        });
      });
    });
    suite('server', function(suite, test) {
      test('server action', function(done) {
        return docpad.action('server', function(err) {
          return done(err);
        });
      });
      test('served generated documents', function(done) {
        return superAgent.get("" + baseUrl + "/html.html", function(err, res) {
          var actual;
          if (err) {
            return done(err);
          }
          actual = res.text;
          return safefs.readFile("" + expectPath + "/html.html", function(err, expected) {
            if (err) {
              return done(err);
            }
            expect(actual.toString().trim()).to.be.equal(expected.toString().trim());
            return done();
          });
        });
      });
      test('served custom urls', function(done) {
        return superAgent.get("" + baseUrl + "/my-custom-url", function(err, res) {
          var actual;
          if (err) {
            return done(err);
          }
          actual = res.text;
          return safefs.readFile("" + expectPath + "/custom-url.html", function(err, expected) {
            if (err) {
              return done(err);
            }
            expect(actual.toString().trim()).to.be.equal(expected.toString().trim());
            return done();
          });
        });
      });
      test('served dynamic documents - part 1/2', function(done) {
        return superAgent.get("" + baseUrl + "/dynamic.html?name=ben", function(err, res) {
          var actual, expected;
          if (err) {
            return done(err);
          }
          actual = res.text;
          expected = 'hi ben';
          expect(actual.toString().trim()).to.be.equal(expected);
          return done();
        });
      });
      return test('served dynamic documents - part 2/2', function(done) {
        return superAgent.get("" + baseUrl + "/dynamic.html?name=joe", function(err, res) {
          var actual, expected;
          if (err) {
            return done(err);
          }
          actual = res.text;
          expected = 'hi joe';
          expect(actual.toString().trim()).to.be.equal(expected);
          return done();
        });
      });
    });
    return test('close the close', function() {
      return docpad.getServer(true).serverHttp.close();
    });
  });

}).call(this);
