// Generated by CoffeeScript 1.6.3
(function() {
  var cliPath, docpad, docpadConfig, docpadPath, expect, expectPath, joe, pathUtil, renderPath, rootPath,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  expect = require('chai').expect;

  joe = require('joe');

  pathUtil = require('path');

  docpadPath = pathUtil.join(__dirname, '..', '..');

  rootPath = pathUtil.join(docpadPath, 'test');

  renderPath = pathUtil.join(rootPath, 'render');

  expectPath = pathUtil.join(rootPath, 'render-expected');

  cliPath = pathUtil.join(docpadPath, 'bin', 'docpad');

  docpadConfig = {
    port: 9780,
    rootPath: rootPath,
    logLevel: (process.env.TRAVIS_NODE_VERSION != null) || __indexOf.call(process.argv, '-d') >= 0 ? 7 : 5,
    skipUnsupportedPlugins: false,
    catchExceptions: false,
    environments: {
      development: {
        a: 'instanceConfig',
        b: 'instanceConfig',
        templateData: {
          a: 'instanceConfig',
          b: 'instanceConfig'
        }
      }
    }
  };

  process.on('uncaughtException', function(err) {
    throw err;
  });

  docpad = null;

  joe.suite('docpad-api', function(suite, test) {
    suite('models', function(suite, test) {
      var DocumentModel, FileModel;
      FileModel = require('../lib/models/file');
      DocumentModel = require('../lib/models/document');
      return suite('document', function(suite, tet) {
        var document, documentAttributes;
        document = null;
        documentAttributes = {
          meta: {
            relativePath: "some/relative/path.txt"
          }
        };
        test('create', function() {
          document = new DocumentModel(documentAttributes);
          document.on('log', console.log.bind(console));
          expect(document.getMeta('relativePath'), 'meta relativePath').to.eql(documentAttributes.meta.relativePath);
          return expect(document.get('relativePath'), 'attr relativePath').to.eql(documentAttributes.meta.relativePath);
        });
        return test('load', function(complete) {
          return document.load(function(err) {
            if (err) {
              return complete(err);
            }
            expect(document.getMeta('relativePath'), 'relativePath').to.eql(documentAttributes.meta.relativePath);
            return complete();
          });
        });
      });
    });
    test('createInstance', function(done) {
      return docpad = require('../main').createInstance(docpadConfig, done);
    });
    return suite('render', function(suite, test) {
      var inputs;
      inputs = [
        {
          testname: 'markdown without extension',
          filename: 'file',
          stdin: '*awesome*',
          stdout: '*awesome*'
        }, {
          testname: 'markdown with extension as filename',
          filename: 'markdown',
          stdin: '*awesome*',
          stdout: '<p><em>awesome</em></p>'
        }, {
          testname: 'markdown with extension',
          filename: 'example.md',
          stdin: '*awesome*',
          stdout: '*awesome*'
        }, {
          testname: 'markdown with extensions',
          filename: '.html.md',
          stdin: '*awesome*',
          stdout: '<p><em>awesome</em></p>'
        }, {
          testname: 'markdown with filename',
          filename: 'example.html.md',
          stdin: '*awesome*',
          stdout: '<p><em>awesome</em></p>'
        }
      ];
      return inputs.forEach(function(input) {
        return test(input.testname, function(done) {
          var opts;
          opts = {
            data: input.stdin,
            filename: input.filename,
            renderSingleExtensions: 'auto'
          };
          return docpad.action('render', opts, function(err, result) {
            if (err) {
              return done(err);
            }
            expect(result.trim()).to.equal(input.stdout);
            return done();
          });
        });
      });
    });
  });

}).call(this);
